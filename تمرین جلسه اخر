import turtle as t

import random as r

import time as tm

import math as m



class Forme:

    def __init__(self, typ, max_hp, spd, rival_types, col, size):

        self.obj = t.Turtle()

        self.obj.speed(0)

        self.obj.penup()



        self.typ = typ

        self.hp = max_hp

        self.spd = spd

        self.rivals = rival_types

        self.size = size



        self.obj.shape("circle")

        self.obj.shapesize(*size)

        self.obj.color(col)



        ang = r.uniform(0, 360)

        rad = m.radians(ang)

        self.dx = m.cos(rad) * spd

        self.dy = m.sin(rad) * spd



    def motion(self):

        self.obj.goto(self.obj.xcor() + self.dx, self.obj.ycor() + self.dy)



    def boundary_check(self):

        w = t.window_width() // 2 - 20

        h = t.window_height() // 2 - 20

        if abs(self.obj.xcor()) > w:

            self.dx *= -1

        if abs(self.obj.ycor()) > h:

            self.dy *= -1



    def overlap(self, other):

        dist = self.obj.distance(other.obj.pos())

        threshold = (self.size[0] + other.size[0]) * 10

        return dist < threshold



class Box(Forme):

    def __init__(self):

        super().__init__(

            typ='sq',

            max_hp=4,

            spd=2,

            rival_types=['ci'],

            col='red',

            size=(1.5, 1.5, 1)

        )

        self.obj.shape("square")



class Pyramid(Forme):

    def __init__(self):

        super().__init__(

            typ='tr',

            max_hp=3,

            spd=2.5,

            rival_types=['ci'],

            col='green',

            size=(1.3, 1.3, 1)

        )

        self.obj.shape("triangle")



class Bar(Forme):

    def __init__(self):

        super().__init__(

            typ='rt',

            max_hp=5,

            spd=1.8,

            rival_types=['sq'],

            col='blue',

            size=(2.0, 1.0, 1)

        )

        self.obj.shape("square")



class Sphere(Forme):

    def __init__(self):

        super().__init__(

            typ='ci',

            max_hp=6,

            spd=2.2,

            rival_types=['rt'],

            col='yellow',

            size=(1.0, 1.0, 1)

        )

        self.obj.shape("circle")



class Simulation:

    def __init__(self):

        self.entities = []

        self.initialize_screen()

        self.spawn_entities()



    def initialize_screen(self):

        self.scn = t.Screen()

        self.scn.title("Simulation")

        self.scn.setup(width=800, height=600)

        self.scn.bgcolor("white")

        self.scn.tracer(0)



    def spawn_entities(self):

        for cls in (Box, Pyramid, Bar, Sphere):

            for _ in range(r.randint(3, 7)):

                entity = cls()

                entity.obj.goto(r.randint(-350, 350), r.randint(-250, 250))

                self.entities.append(entity)



    def resolve_collisions(self):

        removals = set()

        for i in range(len(self.entities)):

            for j in range(i + 1, len(self.entities)):

                e1 = self.entities[i]

                e2 = self.entities[j]

                if e1.overlap(e2):

                    if e2.typ in e1.rivals:

                        e2.hp -= 1

                    elif e1.typ in e2.rivals:

                        e1.hp -= 1

                    e1.dx, e1.dy = -e1.dx, -e1.dy

                    e2.dx, e2.dy = -e2.dx, -e2.dy



                    if e1.hp <= 0:

                        removals.add(e1)

                    if e2.hp <= 0:

                        removals.add(e2)



        for rem in removals:

            rem.obj.hideturtle()

            if rem in self.entities:

                self.entities.remove(rem)



    def execute(self):

        try:

            while self.entities:

                self.scn.update()

                for ent in self.entities:

                    ent.motion()

                    ent.boundary_check()

                self.resolve_collisions()

                tm.sleep(0.01)

            print("Simulation Over!")

        except t.Terminator:

            pass

        finally:

            t.bye()



if __name__ == "__main__":

    Simulation().execute()














۲ 

from datetime import datetime

class Dish:
    def __init__(self, title, group, cook_days):
        self.title = title
        self.group = group
        self.cook_days = cook_days
        self.quantity = 0

    def set_quantity(self, count):
        self.quantity = count

    def is_available_today(self):
        day = datetime.now().strftime('%A')
        return day in self.cook_days

class Worker:
    def __init__(self, full_name, section):
        self.full_name = full_name
        self.section = section
        self.leave = False

    def apply_leave(self):
        self.leave = True

    def leave_status(self):
        return f"{self.full_name} ({self.section}) - {'در مرخصی' if self.leave else 'مشغول'}"

class System:
    def __init__(self):
        self.dish_list = {}
        self.worker_list = []

    def insert_dish(self, dish, stock):
        dish.set_quantity(stock)
        self.dish_list[dish.title] = dish

    def insert_worker(self, worker):
        self.worker_list.append(worker)

    def list_workers(self):
        for w in self.worker_list:
            print(w.leave_status())

    def list_menu(self):
        for d in self.dish_list.values():
            print(f"{d.title} ({d.group}) - پخت: {', '.join(d.cook_days)}")

    def today_dishes(self):
        current = datetime.now().strftime('%A')
        available = [d.title for d in self.dish_list.values() if d.is_available_today()]
        if available:
            print(f"امروز ({current}) قابل تهیه: {', '.join(available)}")
        else:
            print(f"امروز ({current}) هیچ غذایی پخته نمی‌شود.")
        return available

    def make_order(self, dish_name, count):
        dish = self.dish_list.get(dish_name)
        if not dish:
            print("چنین غذایی نداریم.")
            return
        if not dish.is_available_today():
            print(f"{dish.title} امروز پخته نمی‌شود. پخت در: {', '.join(dish.cook_days)}")
            return
        if dish.quantity < count:
            print(f"موجودی کافی نیست ({dish.quantity} باقی‌مانده)")
            return
        dish.quantity -= count
        print(f"سفارش {dish.title} با تعداد {count} انجام شد. باقی‌مانده: {dish.quantity}")

# تست ساده
system = System()

iran = ['عدس‌پلو', 'باقالی‌پلو', 'مرغ', 'خوراک لوبیا', 'آبگوشت', 'کوفته', 'ته‌چین']
world = ['چیزبرگر', 'راتاتویی', 'لازانیا', 'چیکن کاری', 'نودل', 'چوروس', 'سوشی']
week = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']

for i in range(7):
    system.insert_dish(Dish(iran[i], 'ملی', [week[i]]), 8)
    system.insert_dish(Dish(world[i], 'جهانی', [week[i]]), 8)

system.insert_worker(Worker("احمدرضا", "بسته‌بندی"))
system.insert_worker(Worker("نگار", "پخت"))
system.insert_worker(Worker("یوسف", "تحویل"))
system.worker_list[0].apply_leave()

print("کارمندان:")
system.list_workers()

print("\nمنو کامل:")
system.list_menu()

print("\nغذاهای امروز:")
today = system.today_dishes()

if today:
    system.make_order(today[0], 1)

for item in system.dish_list:
    if item not in today:
        system.make_order(item, 1)
        break






۳

import numpy as np
import matplotlib.pyplot as plt

class StateModel:
    def __init__(self, A, B, C, D, dt=0.01):  # اصلاح نام تابع سازنده
        self.A = np.array(A, dtype=float)
        self.B = np.array(B, dtype=float)
        self.C = np.array(C, dtype=float)
        self.D = np.array(D, dtype=float)
        self.dt = dt
        self._validate()

    def _validate(self):
        rows, cols = self.A.shape
        if rows != cols:
            raise ValueError("Matrix A must be square (n x n).")
        if self.B.shape != (rows, 1):
            raise ValueError("Matrix B must be n x 1.")
        if self.C.shape != (1, rows):
            raise ValueError("Matrix C must be 1 x n.")
        if self.D.shape != (1, 1):
            raise ValueError("Matrix D must be 1 x 1.")

    def simulate(self, input_func, duration=10.0):
        n = self.A.shape[0]
        steps = int(duration / self.dt) + 1
        time_points = np.linspace(0, duration, steps)
        states = np.zeros((n, steps))
        outputs = np.zeros(steps)

        for k in range(steps - 1):
            u_k = input_func(time_points[k])
            state_dot = self.A @ states[:, k] + self.B.flatten() * u_k
            states[:, k + 1] = states[:, k] + self.dt * state_dot
            outputs[k] = self.C @ states[:, k] + self.D.flatten() * u_k

        final_input = input_func(time_points[-1])
        outputs[-1] = self.C @ states[:, -1] + self.D.flatten() * final_input
        return time_points, outputs

    def plot_output(self, time_points, outputs, title="System Response"):
        plt.figure(figsize=(8, 5))
        plt.plot(time_points, outputs, label="Output y(t)")
        plt.title(title)
        plt.xlabel("Time (s)")
        plt.ylabel("Output")
        plt.grid(True)
        plt.legend()
        plt.show()

if __name__ == "__main__":  # اصلاح شرط اجرای اصلی
    try:
        A = [[0, 1, 0, 0],
             [-1, -1, 0, 1],
             [0, 0, 0, 1],
             [0, -1, -1, -1]]
        B = [[0], [1], [0], [1]]
        C = [[1, 0, 0, 0]]
        D = [[0]]

        system = StateModel(A, B, C, D)

        def step_input(t):
            return 1.0

        time_series, system_output = system.simulate(step_input, duration=10.0)
        system.plot_output(time_series, system_output, title="State Space Simulation")

    except Exception as error:
        print("Error:", error)

